name: 'release-without-notarization'

on:
  workflow_dispatch:
  workflow_run:
    workflows: ['build-sign']
    types:
      - completed
      
jobs:
  prepare-release-notes:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: read
    outputs:
      release_notes: ${{ steps.notes.outputs.RELEASE_NOTES }}
      app_version: ${{ steps.version.outputs.APP_VERSION }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      
      - name: Extract app version
        id: version
        run: |
          APP_VERSION=$(grep -m1 'version =' src-tauri/Cargo.toml | cut -d '"' -f2)
          echo "APP_VERSION=$APP_VERSION" >> $GITHUB_OUTPUT
          
      - name: Generate GitHub-Style Release Notes
        id: notes
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APP_VERSION: ${{ steps.version.outputs.APP_VERSION }}
        run: |
          # Get repository details
          REPO_OWNER=$(echo "$GITHUB_REPOSITORY" | cut -d '/' -f 1)
          REPO_NAME=$(echo "$GITHUB_REPOSITORY" | cut -d '/' -f 2)
          
          # Get all tags sorted by version number
          ALL_TAGS=$(git tag -l 'v*' | sort -V)
          echo "All tags in repository: $ALL_TAGS"
          
          # Get the current version with 'v' prefix
          CURRENT_TAG="v$APP_VERSION"
          
          # Find the previous tag based on version sorting
          PREVIOUS_TAG=$(echo "$ALL_TAGS" | grep -v "^$CURRENT_TAG$" | sort -V | tail -n 1)
          
          # Debug output
          echo "Previous tag: $PREVIOUS_TAG"
          echo "Current version: $CURRENT_TAG"
          
          # Start release notes
          echo "## What's Changed" > RELEASE_NOTES.md
          
          # Get merged PRs
          gh pr list --repo $GITHUB_REPOSITORY --state merged --base main --json number,title,author,url --limit 10 | jq -r '.[] | "* \(.title) by @\(.author.login) in \(.url)"' >> RELEASE_NOTES.md
          
          # Add full changelog link with explicit version
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "" >> RELEASE_NOTES.md
            echo "**Full Changelog**: https://github.com/$REPO_OWNER/$REPO_NAME/compare/$PREVIOUS_TAG...$CURRENT_TAG" >> RELEASE_NOTES.md
          fi
          
          # Add the security warning template
          cat >> RELEASE_NOTES.md << 'EOL'
          
          ## ⚠️ Important Security Note for Windows Users
          Our .exe and .msi installers are unsigned at this time. This means:

              Windows Defender/SmartScreen will show "Windows protected your PC"
              Antivirus software might flag the files

          ## Why?
          We're a brand-new project and code signing certificates cost ~$400/year.

          How to install safely:
          1. Download the files from Assets below
          2. On the warning screen: Click "More info" → "Run anyway"

          ❓ FAQ
          Q: Why is Windows blocking the installer?
          A: We're unsigned – verify the code here first!
          Q: How do I know this isn't malware?
          A: Check the source code
          EOL
          
          # Store release notes to be used by release step
          NOTES=$(cat RELEASE_NOTES.md)
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
          echo "$NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
  
  create-release:
    needs: prepare-release-notes
    runs-on: ubuntu-latest
    permissions:
      contents: write  # This is crucial for creating releases
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.prepare-release-notes.outputs.app_version }}
          name: Balatro Mod Manager v${{ needs.prepare-release-notes.outputs.app_version }} (Alpha Build) Pre-release
          body: ${{ needs.prepare-release-notes.outputs.release_notes }}
          draft: true
          prerelease: true
          files: |
            artifacts/macos-app/*.dmg
            artifacts/windows-app/*.msi
            artifacts/windows-app/*.exe
          token: ${{ secrets.GITHUB_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

