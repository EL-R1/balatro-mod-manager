name: 'sign-macos'

on:
  workflow_run:
    workflows: ["build"]
    types:
      - completed
  workflow_dispatch:

jobs:
  sign-macos:
    runs-on: macos-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download macOS unsigned artifact
        uses: actions/download-artifact@v4
        with:
          name: macos-app-unsigned
          path: ./unsigned-app

      - name: Import Apple Developer Certificate
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          echo $APPLE_CERTIFICATE | base64 --decode > certificate.p12
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
          CERT_INFO=$(security find-identity -v -p codesigning build.keychain | grep "Developer ID Application")
          CERT_ID=$(echo "$CERT_INFO" | awk -F'"' '{print $2}')
          echo "CERT_ID=$CERT_ID" >> $GITHUB_ENV
          echo "Certificate imported. ID: $CERT_ID"

      - name: Extract app version
        shell: bash
        run: |
          APP_VERSION=$(grep -m1 'version =' src-tauri/Cargo.toml | cut -d '"' -f2)
          echo "APP_VERSION=$APP_VERSION" >> $GITHUB_ENV

      - name: Create directory for signed app
        run: mkdir -p ./signed-app

      - name: Sign Application
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          # Sign the .app bundle
          codesign --force --options runtime --sign "$CERT_ID" --deep "./unsigned-app/Balatro Mod Manager.app"
          
          # Copy the signed app to the signed directory
          cp -R "./unsigned-app/Balatro Mod Manager.app" "./signed-app/"
          
          # Create DMG with signed app
          hdiutil create -volname "Balatro Mod Manager" -srcfolder "./signed-app/Balatro Mod Manager.app" -ov -format UDZO "./signed-app/Balatro Mod Manager_${APP_VERSION}_universal.dmg"
          
          # Sign the DMG
          codesign --force --options runtime --sign "$CERT_ID" "./signed-app/Balatro Mod Manager_${APP_VERSION}_universal.dmg"

      - name: Notarize Application
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          # Notarize the DMG
          xcrun notarytool submit "./signed-app/Balatro Mod Manager_${APP_VERSION}_universal.dmg" --apple-id "$APPLE_ID" --password "$APPLE_PASSWORD" --team-id "$APPLE_TEAM_ID" --wait
          
          # Staple the notarization ticket
          xcrun stapler staple "./signed-app/Balatro Mod Manager_${APP_VERSION}_universal.dmg"

      - name: Upload signed artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-app-signed
          path: |
            ./signed-app/Balatro Mod Manager_${{ env.APP_VERSION }}_universal.dmg
          retention-days: 7

