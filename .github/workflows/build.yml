name: 'publish'

on:
  workflow_dispatch:
  push:
    branches:
      - release

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target universal-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ''
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      # macOS certificate setup
      - name: Import Apple Developer Certificate
        if: matrix.platform == 'macos-latest'
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          echo $APPLE_CERTIFICATE | base64 --decode > certificate.p12
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
          security find-identity -v -p codesigning build.keychain

      - name: Verify Certificate
        if: matrix.platform == 'macos-latest'
        run: |
          CERT_INFO=$(security find-identity -v -p codesigning build.keychain | grep "Developer ID Application")
          CERT_ID=$(echo "$CERT_INFO" | awk -F'"' '{print $2}')
          echo "CERT_ID=$CERT_ID" >> $GITHUB_ENV
          echo "Certificate imported. ID: $CERT_ID"

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: install frontend dependencies
        run: bun install

      - name: Generate GitHub-Style Release Notes
        if: matrix.platform == 'ubuntu-22.04'
        id: generate_notes
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get repository details
          REPO_OWNER=$(echo "$GITHUB_REPOSITORY" | cut -d '/' -f 1)
          REPO_NAME=$(echo "$GITHUB_REPOSITORY" | cut -d '/' -f 2)
          
          # Get the latest and previous tags
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "none")
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 --exclude=$LATEST_TAG 2>/dev/null || echo "none")
          
          # Start release notes
          echo "## What's Changed" > RELEASE_NOTES.md
          
          # Get all merged PRs between tags
          if [ "$LATEST_TAG" != "none" ] && [ "$PREVIOUS_TAG" != "none" ]; then
            # Get PRs that were merged between previous and latest tag
            MERGED_AFTER=$(git log -1 --format=%at $PREVIOUS_TAG)
            MERGED_BEFORE=$(git log -1 --format=%at $LATEST_TAG)
            
            # Get merged PRs and filter manually
            gh pr list --repo $GITHUB_REPOSITORY --state merged --base main --json number,title,author,mergedAt,url --limit 100 > prs.json
            cat prs.json | jq --arg after "$MERGED_AFTER" --arg before "$MERGED_BEFORE" '[.[] | select(.mergedAt | fromdateiso8601 > ($after | tonumber) and fromdateiso8601 < ($before | tonumber))]' > filtered_prs.json
            cat filtered_prs.json | jq -r '.[] | "* \(.title) by @\(.author.login) in \(.url)"' >> RELEASE_NOTES.md
          else
            # No previous tag, get recent PRs
            gh pr list --repo $GITHUB_REPOSITORY --state merged --base main --json number,title,author,url --limit 10 | jq -r '.[] | "* \(.title) by @\(.author.login) in \(.url)"' >> RELEASE_NOTES.md
          fi
          
          # Add full changelog link
          if [ "$PREVIOUS_TAG" != "none" ] && [ "$LATEST_TAG" != "none" ]; then
            echo "" >> RELEASE_NOTES.md
            echo "**Full Changelog**: https://github.com/$REPO_OWNER/$REPO_NAME/compare/$PREVIOUS_TAG...$LATEST_TAG" >> RELEASE_NOTES.md
          fi
          
          # Add the security warning template
          cat >> RELEASE_NOTES.md << 'EOL'
          
          ## ⚠️ Important Security Note for Windows Users
          Our .exe and .msi installers are unsigned at this time. This means:

              Windows Defender/SmartScreen will show "Windows protected your PC"
              Antivirus software might flag the files

          ## Why?
          We're a brand-new project and code signing certificates cost ~$400/year.

          How to install safely:
          1. Download the files from Assets below
          2. On the warning screen: Click "More info" → "Run anyway"

          ❓ FAQ
          Q: Why is Windows blocking the installer?
          A: We're unsigned – verify the code here first!
          Q: How do I know this isn't malware?
          A: Check the source code
          EOL
          
          # Store release notes to be used by tauri-action
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          cat RELEASE_NOTES.md >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_SIGNING_IDENTITY: ${{ matrix.platform == 'macos-latest' && env.CERT_ID || '' }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          MACOSX_DEPLOYMENT_TARGET: 11.0
        with:
          tagName: v__VERSION__
          releaseName: 'Balatro Mod Manager v__VERSION__ (Alpha Build) Pre-release'
          releaseBody: ${{ env.RELEASE_NOTES }}
          releaseDraft: true
          prerelease: true
          args: ${{ matrix.args }}

