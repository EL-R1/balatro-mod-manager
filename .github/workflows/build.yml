name: 'publish'

on:
  workflow_dispatch:
  push:
    branches:
      - release
      - 164-implement-automatic-build-workflow

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target universal-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ''
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Setup macOS Signing
        if: matrix.platform == 'macos-latest'
        run: |
          # Import certificate
          echo ${{ secrets.APPLE_CERTIFICATE }} | base64 --decode > certificate.p12
          security create-keychain -p "${{ secrets.APPLE_CERTIFICATE_PASSWORD }}" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "${{ secrets.APPLE_CERTIFICATE_PASSWORD }}" build.keychain
          security import certificate.p12 -k build.keychain -P "${{ secrets.APPLE_CERTIFICATE_PASSWORD }}" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "${{ secrets.APPLE_CERTIFICATE_PASSWORD }}" build.keychain
          rm certificate.p12

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: install frontend dependencies
        run: bun install

      - name: Generate Release Notes
        if: matrix.platform == 'ubuntu-22.04'
        id: generate_notes
        run: |
          # [your existing release notes generation code]
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "none")
          
          echo "## What's New" > RELEASE_NOTES.md
          
          if [ "$LATEST_TAG" != "none" ]; then
            # Generate changelog from commits since the last tag
            echo "### Changes since $LATEST_TAG" >> RELEASE_NOTES.md
            git log $LATEST_TAG..HEAD --pretty=format:"- %s" --reverse | grep -v "Merge" >> RELEASE_NOTES.md
          else
            # No previous tags, list recent commits
            echo "### Initial Release" >> RELEASE_NOTES.md
            git log --pretty=format:"- %s" --reverse -n 10 | grep -v "Merge" >> RELEASE_NOTES.md
          fi
          
          # Add the security warning template
          cat >> RELEASE_NOTES.md << 'EOL'
          
          ## ⚠️ Important Security Note for Windows Users
          Our .exe and .msi installers are unsigned at this time. This means:

              Windows Defender/SmartScreen will show "Windows protected your PC"
              Antivirus software might flag the files

          ## Why?
          We're a brand-new project and code signing certificates cost ~$400/year.

          How to install safely:
          1. Download the files from Assets below
          2. On the warning screen: Click "More info" → "Run anyway"

          ❓ FAQ
          Q: Why is Windows blocking the installer?
          A: We're unsigned – verify the code here first!
          Q: How do I know this isn't malware?
          A: Check the source code
          EOL
          
          # Store release notes to be used by tauri-action
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          cat RELEASE_NOTES.md >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          MACOSX_DEPLOYMENT_TARGET: 11.0
        with:
          tagName: app-v__VERSION__
          releaseName: 'Balatro Mod Manager v__VERSION__ (Alpha Build) Pre-release'
          releaseBody: ${{ env.RELEASE_NOTES }}
          releaseDraft: true
          prerelease: true
          args: ${{ matrix.args }}

