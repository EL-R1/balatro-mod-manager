name: 'publish'

on:
  workflow_dispatch:
  push:
    branches:
      - release
      - 164-implement-automatic-build-workflow

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest' # for Intel based macs.
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ''
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for changelog generation

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable # Set this to dtolnay/rust-toolchain@nightly
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: install frontend dependencies
        # If you don't have `beforeBuildCommand` configured you may want to build your frontend here too.
        run: bun install # change this to npm or pnpm depending on which one you use.

      - name: Generate Release Notes
        if: matrix.platform == 'ubuntu-22.04' # Only run once
        id: generate_notes
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "none")
          
          echo "## What's New" > RELEASE_NOTES.md
          
          if [ "$LATEST_TAG" != "none" ]; then
            # Generate changelog from commits since the last tag
            echo "### Changes since $LATEST_TAG" >> RELEASE_NOTES.md
            git log $LATEST_TAG..HEAD --pretty=format:"- %s" --reverse | grep -v "Merge" >> RELEASE_NOTES.md
          else
            # No previous tags, list recent commits
            echo "### Initial Release" >> RELEASE_NOTES.md
            git log --pretty=format:"- %s" --reverse -n 10 | grep -v "Merge" >> RELEASE_NOTES.md
          fi
          
          # Add the security warning template
          cat >> RELEASE_NOTES.md << 'EOL'
          
          ## ⚠️ Important Security Note for Windows Users
          Our .exe and .msi installers are unsigned at this time. This means:

              Windows Defender/SmartScreen will show "Windows protected your PC"
              Antivirus software might flag the files

          ## Why?
          We're a brand-new project and code signing certificates cost ~$400/year.

          How to install safely:
          1. Download the files from Assets below
          2. On the warning screen: Click "More info" → "Run anyway"

          ❓ FAQ
          Q: Why is Windows blocking the installer?
          A: We're unsigned – verify the code here first!
          Q: How do I know this isn't malware?
          A: Check the source code
          EOL
          
          # Store release notes to be used by tauri-action
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          cat RELEASE_NOTES.md >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: app-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
          releaseName: 'Balatro Mod Manager v__VERSION__ (Alpha Build) Pre-release'
          releaseBody: ${{ env.RELEASE_NOTES }}
          releaseDraft: true
          prerelease: true
          args: ${{ matrix.args }}

